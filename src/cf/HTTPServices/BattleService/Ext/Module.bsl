#Область Обработчики

Функция PingGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);       
	Ответ.Заголовки.Вставить("Content-Type", "text/plain; charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки("Понг");
	
	Возврат Ответ;    
	
КонецФункции

Функция ТекущийБаттлGET(Запрос) 

	ТекущийБаттл = УправлениеБаттлом.ТекущийБаттл(); 
	
	Если ЗначениеЗаполнено(ТекущийБаттл) Тогда
		Ответ = НовыйОтветJSON(ТекущийБаттл);
	Иначе
		Ответ = НовыйОтветJSON("На сервере не установлен текущий баттл!", 404); 
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция СостояниеБаттлаGET(Запрос)     
	
	Попытка	                           
		
		ПараметрыЗапроса = ПолучитьПараметрыЗапросаИзQueryString(Запрос, "battle");
		Баттл = БаттлИзСтруктурыПараметров(ПараметрыЗапроса);
		
	Исключение			

		Возврат НовыйОтветОшибка(ИнформацияОбОшибке());		

	КонецПопытки;

	СостояниеБаттла = УправлениеБаттлом.СостояниеБаттла(Баттл);
	
	Возврат НовыйОтветJSON(СостояниеБаттла);
	
КонецФункции

Функция ЗаданияGET(Запрос)

	Попытка	                           
		
		ПараметрыЗапроса = ПолучитьПараметрыЗапросаИзQueryString(Запрос, "battle");
		Баттл = БаттлИзСтруктурыПараметров(ПараметрыЗапроса);
		
	Исключение			

		Возврат НовыйОтветОшибка(ИнформацияОбОшибке());		

	КонецПопытки;

	ЗаданияБаттла = УправлениеБаттлом.ЗаданияБаттла(Баттл);
	
	Возврат НовыйОтветJSON(ЗаданияБаттла);
		
КонецФункции

Функция УчастникиGET(Запрос)

	Попытка	                           
		
		ПараметрыЗапроса = ПолучитьПараметрыЗапросаИзQueryString(Запрос, "battle");
		Баттл = БаттлИзСтруктурыПараметров(ПараметрыЗапроса);
		
	Исключение			

		Возврат НовыйОтветОшибка(ИнформацияОбОшибке());		

	КонецПопытки;
		
	Участники = УправлениеБаттлом.УчастникиБаттла(Баттл);
	
	Возврат НовыйОтветJSON(Участники);	
	
КонецФункции

Функция НачатьРаундPOST(Запрос) 
		
	Попытка	                   

		ПараметрыЗапроса = ПолучитьПараметрыЗапросаИзТелаJSON(Запрос, "battle,competitor,task,round");
				
		Баттл = БаттлИзСтруктурыПараметров(ПараметрыЗапроса);
		Участник = ЭлементСправочникаИзСтруктурыПараметров(ПараметрыЗапроса, "competitor", "Участники", Истина);
		Задание = ЭлементСправочникаИзСтруктурыПараметров(ПараметрыЗапроса, "task", "Задания");
		НомерРаунда = ПараметрыЗапроса["round"];
		
	Исключение			
		Возврат НовыйОтветОшибка(ИнформацияОбОшибке());		
	КонецПопытки;
		
	УправлениеБаттлом.НачатьРаунд(Баттл, НомерРаунда, Участник, Задание);
	
	Возврат НовыйОтветJSON(Неопределено, 201);
	
КонецФункции                        

Функция ЗавершитьРаундPOST(Запрос)
	
	Попытка	     
		
		ПараметрыЗапроса = ПолучитьПараметрыЗапросаИзТелаJSON(Запрос, "battle,competitor,task,round");
		
		Баттл = БаттлИзСтруктурыПараметров(ПараметрыЗапроса);
		Участник = ЭлементСправочникаИзСтруктурыПараметров(ПараметрыЗапроса, "competitor", "Участники", Истина);
		Задание = ЭлементСправочникаИзСтруктурыПараметров(ПараметрыЗапроса, "task", "Задания");
		НомерРаунда = ПараметрыЗапроса["round"]; 
		
	Исключение			
		Возврат НовыйОтветОшибка(ИнформацияОбОшибке());		
	КонецПопытки;
		
	УправлениеБаттлом.ЗавершитьРаунд(Баттл, НомерРаунда, Участник, Задание);
	
	Возврат НовыйОтветJSON(Неопределено, 201);
	
КонецФункции

#КонецОбласти

#Область ОбработкаПараметровЗапроса

Функция ЭлементСправочникаИзСтруктурыПараметров(Знач СтруктураПараметров, Знач ИмяПараметра, Знач ИмяСправочника, Знач ИскатьПоНаименованию = Ложь)  

	ЗначениеПараметра = ОбязательныйПараметр(СтруктураПараметров, ИмяПараметра);
	
	Если ИскатьПоНаименованию Тогда
		ЭлементСсылка = Справочники[ИмяСправочника].НайтиПоНаименованию(ЗначениеПараметра);
		Если ЭлементСсылка.Пустая() Тогда
			ВызватьИсключение_НеНайденЭлементПоНаименованию(ИмяСправочника, ЗначениеПараметра, ИмяПараметра);
		КонецЕсли;		
	Иначе
		ЭлементСсылка = Справочники[ИмяСправочника].НайтиПоКоду(ЗначениеПараметра);
		Если ЭлементСсылка.Пустая() Тогда
			ВызватьИсключение_НеНайденЭлементПоКоду(ИмяСправочника, ЗначениеПараметра, ИмяПараметра);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭлементСсылка;
	
КонецФункции

Функция ОбязательныйПараметр(Знач ПараметрыЗапроса, Знач ИмяПараметра)
		
	ЗначениеПараметра = ПараметрыЗапроса[ИмяПараметра];
	Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		ВызватьИсключение_НеУказанПараметр(ИмяПараметра);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция БаттлИзСтруктурыПараметров(ПараметрыЗапроса)	
	Возврат ЭлементСправочникаИзСтруктурыПараметров(ПараметрыЗапроса, "battle", "Баттлы", Ложь);	
КонецФункции

Функция ПолучитьПараметрыЗапросаИзQueryString(Запрос, ОбязательныеПараметры = Неопределено) Экспорт

	ПараметрыЗапроса = Новый Соответствие(Запрос.ПараметрыЗапроса);

	Если ОбязательныеПараметры <> Неопределено Тогда

		ПроверитьОбязательныеКлючи(ПараметрыЗапроса, ОбязательныеПараметры);

	КонецЕсли;

	Возврат ПараметрыЗапроса;

КонецФункции

// Получить параметры запроса из тела JSON в виде структуры
//
// Параметры:
//  Запрос					 - HTTPСервисЗапрос	 - запрос
//  ОбязательныеПараметры	 - Строка	 - обязательные параметры через запятую
//
// Возвращаемое значение:
//   Структура - структура ответа
//
Функция ПолучитьПараметрыЗапросаИзТелаJSON(Запрос, ОбязательныеПараметры = Неопределено) Экспорт

	ТелоСтрокой = Запрос.ПолучитьТелоКакПоток();
		
	Попытка

		ПараметрыПреобразования = Новый Структура("ПрочитатьВСоответствие", Ложь);
		ПараметрыЗапроса = КоннекторHTTP.JsonВОбъект(ТелоСтрокой, "utf-8", ПараметрыПреобразования);

	Исключение

		ВызватьИсключение Исключение_ТелоЗапросаНеJSON();

	КонецПопытки;

	Если ОбязательныеПараметры <> Неопределено Тогда

		ПроверитьОбязательныеКлючи(ПараметрыЗапроса, ОбязательныеПараметры);

	КонецЕсли;
	
	Отладка(ПараметрыЗапроса);
	
	Возврат ПараметрыЗапроса;

КонецФункции

Процедура ПроверитьОбязательныеКлючи(ПараметрыЗапроса, ОбязательныеПараметры)

	ТипПараметров = ТипЗнч(ПараметрыЗапроса);
	Тип_Структура = Тип("Структура");

	МассивОтсутствующихПараметров = Новый Массив;

	СтруктураОбязательныхПараметров = Новый Структура(ОбязательныеПараметры);
	Для Каждого Элемент Из СтруктураОбязательныхПараметров Цикл

		Если ТипПараметров = Тип_Структура Тогда

			Если НЕ ПараметрыЗапроса.Свойство(Элемент.Ключ) Тогда
				МассивОтсутствующихПараметров.Добавить(Элемент.Ключ);
			КонецЕсли;

		Иначе // Соответствие

			Если ПараметрыЗапроса.Получить(Элемент.Ключ) = Неопределено Тогда
				МассивОтсутствующихПараметров.Добавить(Элемент.Ключ);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если МассивОтсутствующихПараметров.Количество() Тогда
		ВызватьИсключение Исключение_ОтсутствуютОбязательныеПараметры(МассивОтсутствующихПараметров);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Функция НовыйОтветОшибка(ИнформацияОбОшибке)

	ПодробноеОписание = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ЗаписьЖурналаРегистрации("Баттл", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеОписание);
	
	КодОшибки = КоннекторHTTP.ЧислоИзСтроки(ИнформацияОбОшибке.Код);
	Если КодОшибки = 0 Тогда
		КодОшибки = 500;
	КонецЕсли;
	
	Возврат НовыйОтветJSON(ИнформацияОбОшибке.Описание, КодОшибки);
		
КонецФункции

Функция НовыйОтветJSON(Знач СодержимоеОтвета, Знач КодОтвета = 200)

	Ответ = Новый HTTPСервисОтвет(Число(КодОтвета));	
	
	Если Не ЗначениеЗаполнено(СодержимоеОтвета) Тогда
		СодержимоеОтвета = "OK";
	КонецЕсли;
		
	ДанныеОтвета = Новый Структура;
	Если КодОтвета = 200 Или КодОтвета = 201 Тогда		
		ДанныеОтвета.Вставить("Результат", СодержимоеОтвета);
	Иначе
		ДанныеОтвета.Вставить("Ошибка", СодержимоеОтвета);
	КонецЕсли;
	
	Ответ.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(КоннекторHTTP.ОбъектВJson(ДанныеОтвета));
		
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Исключения

Функция Исключение_ТелоЗапросаНеJSON()

	Возврат "Не верный формат тела запроса. Ожидается тело запроса в формате JSON";

КонецФункции

Функция Исключение_ОтсутствуютОбязательныеПараметры(МассивОтсутствующихПараметров)

	Возврат "В запросе отсутствуют обязательные параметры: " + СтрСоединить(МассивОтсутствующихПараметров, ", ");

КонецФункции

Функция ВызватьИсключение_НеУказанПараметр(ИмяПараметра)
	ТекстИсключения = СтрШаблон("В запросе не указан параметр с ""%1""", ИмяПараметра);
	ВызватьИсключение(ТекстИсключения, Неопределено, "404");
КонецФункции  

Функция ВызватьИсключение_НеНайденЭлементПоКоду(ИмяСправочника, КодЭлемента, ИмяПараметра)
	Шаблон = "В справочнике '%1' не найден элемент с кодом '%2', переданным в запросе в параметре '%3'";
	ТекстИсключения = СтрШаблон(Шаблон, ИмяСправочника, КодЭлемента, ИмяПараметра);
	ВызватьИсключение(ТекстИсключения, Неопределено, "404");
КонецФункции  

Функция ВызватьИсключение_НеНайденЭлементПоНаименованию(ИмяСправочника, НаименованиеЭлемента, ИмяПараметра)
	Шаблон = "В справочнике ""%1"" не найден элемент с наименованием ""%2"", переданным в запросе в параметре ""%3""";
	ТекстИсключения = СтрШаблон(Шаблон, ИмяСправочника, НаименованиеЭлемента, ИмяПараметра);
	ВызватьИсключение(ТекстИсключения, Неопределено, "404");
КонецФункции 

#КонецОбласти      

#Область Отладка

Процедура Отладка(Значение)
	
	Лог = Новый Массив;
	
	ТипЗначения = ТипЗнч(Значение);
	
	Лог.Добавить("Тип значения: " + ТипЗначения);
	Если ТипЗначения = Тип("Структура") Или ТипЗначения = Тип("Соответствие") Тогда
		Для каждого Элемент из Значение Цикл
			Лог.Добавить(СтрШаблон("%1 = %2 (Тип: %3)", Элемент.Ключ, Элемент.Значение, ТипЗнч(Элемент.Значение)));
		КонецЦикла;
	КонецЕсли;
	
	Если Лог.Количество() Тогда
		ЛогСтрокой = СтрСоединить(Лог, Символы.ПС);	
		ЗаписьЖурналаРегистрации("Баттл.Отладка", УровеньЖурналаРегистрации.Предупреждение,,,ЛогСтрокой);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти      



